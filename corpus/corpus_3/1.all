# -*- coding: utf-8 -*-

import re
import os
import sys
import string
import htmlentitydefs
import glob
import operator
import json

##_____________________________________________________________________
##__________________________FROM TP 1 - 2______________________________

def read_file(html_file) :
	f = open(html_file, 'r')
	s = f.read()
	f.close()
	return s
	
def write_file(new_file, s) :
	f = open(new_file, 'w')
	f.write(s)
	f.close()

def write_file_rw(new_file,s):
	f = open(new_file,s)
	f.write(s)
	f.close

# _______ detection encoding

def source2encoding(s) :
	default_encoding = 'iso-8859-1'
	pattern_detect_encoding = '<meta http-equiv=["\']content-Type["\'][ \n\r]*content=["\']text/html; ?charset=(.+?)["\']'
	pattern_compiled = re.compile(pattern_detect_encoding, re.I)
	match_charset = re.search(pattern_compiled, s)
	if match_charset :
		encoding = string.lower(match_charset.group(1))
		#~ print 'detected charset ::', encoding.encode('utf-8')
	else :
		encoding = default_encoding
		#~ print 'undetected charset, use default encoding ::', default_encoding
	return encoding

#_____________clean html___________
def clean_unicode_html(s_unicode) :
	clean_html = re.sub(u'&nbsp;', ' ', s_unicode)
	clean_html = re.sub(u'[\s]+', u' ', clean_html)

	pattern1 = re.compile(u'<script.+?</script>', re.I | re.M)
	clean_html = pattern1.sub(u'', clean_html)

	pattern2 = re.compile(u'<!\-\-.+?\-\->', re.M)
	clean_html = pattern2.sub(u'', clean_html)

	pattern3 = re.compile(u'<select.+?</select>', re.I | re.M)
	clean_html = pattern3.sub(u'', clean_html)

	pattern4 = re.compile(u'<style.+?</style>', re.I | re.M)
	clean_html = pattern4.sub(u'', clean_html)

	clean_html = re.sub(u'(?:&gt;|&lt;)', u' ', clean_html)
	
	pattern5 = re.compile(u'[\s]*</*[^>]+/*>[\s]*', re.I | re.M)
	clean_html = pattern5.sub(u' # ', clean_html)

	pattern6 = re.compile(u'\s[#\s]+', re.I | re.M)
	clean_html = pattern6.sub(u' # ', clean_html)
	
	pattern7 = re.compile(u'[&]?&eacute;', re.I | re.M)
	clean_html = pattern7.sub(u'Ã©', clean_html)  
  
	return clean_html
	
	
	
#_________html entities______
def replace_num_entities(matchobj_unicode) :
	if int(matchobj_unicode.group(1)) in range(65535):
		return unichr(int(matchobj_unicode.group(1)))
	else:
		return '&#%s;'%(matchobj_unicode.group(1))

def replace_alpha_entities(matchobj_unicode) :
	k = matchobj_unicode.group(1)
	if not htmlentitydefs.entitydefs.has_key(k) :
		if k.isupper() :
			k = string.lower(matchobj_unicode.group(1))
			if not htmlentitydefs.entitydefs.has_key(cle) :
				return ''
		else :
			return ''
	if len(htmlentitydefs.entitydefs[k]) == 1 :
		car = htmlentitydefs.entitydefs[k]
		return unicode(car, 'iso-8859-1')
	else :
		str_code = htmlentitydefs.entitydefs[k].strip('&#;')
		return unichr(int(str_code))

def decode_html_entities(s_unicode) :
	html = re.sub('&#([0-9]+);', replace_num_entities, s_unicode)
	pattern = re.compile('&([a-z]+);', re.I)
	html = pattern.sub(replace_alpha_entities, html)
	return html
	
#______________listemot________
def get_list_words(html_unicode):
	pattern_word=u'[\w]+'
	pattern_word_compiled=re.compile(pattern_word, re.U)
	list_words=re.findall(pattern_word_compiled, html_unicode)
	number=u'[0-9]'
	number_compiled=re.compile(number, re.U)
	return list_words

def dict_count(d, k) :
	if(d.has_key(k)) :
		d[k] += 1
	else :
		d[k] = 1

def list_words2dict_effectif(list_words_unicode) :
	dict_effectif = {}
	for i in list_words_unicode :
		dict_count(dict_effectif, i)
	return dict_effectif

def dict_effectif2list_effectif(dict_effectif):
	l=[]
	for i in dict_effectif:
		l+=[[i,dict_effectif[i]]]
	return l
	

##______________preparation fichier_________

def prepare_file(html_file) :
	src_html = read_file(html_file)
	encoding_detected = source2encoding(src_html)
	src_html_unicode = unicode(src_html,encoding_detected)
	src_html_unicode = clean_unicode_html(src_html_unicode)
	src_html_unicode = decode_html_entities(src_html_unicode)
	return src_html_unicode

#________nomfichier_____
def nomfichier(adresse):
	nom="%s"%(adresse)
	nom=re.sub("[A-Za-z0-9]*[/]+",'',nom)
	nom=re.sub('.htm+l?','',nom)
	nom="%s"%(nom)
	return nom


## ___________________________________________________________
#______________________________TP 3 __________________________

def get_trigram(su):
	x=[]
	for i in xrange(len(su)-2):
		x+=[su[i:i+3]]
	return x

def get_suffixe(su):
	list_suffixe=[]
	x=get_list_words(su)
	for mot in x:
		list_suffixe+=[mot[-3:]]
	return list_suffixe

def dic_eff_trigram(su):
	list_trigram=get_trigram(su)
	dic_trigram=list_words2dict_effectif(list_trigram)
	return dic_trigram
	
def dic_eff_suffixe(su):
	list_suffixe=get_suffixe(su)
	dic_suffixe=list_words2dict_effectif(list_suffixe)
	return dic_suffixe
	
def dic_eff_mot(su):
	list_mot=get_list_words(su)
	dic_mot=list_words2dict_effectif(list_mot)
	return dic_mot

def ajout_dic(d1,d2):
	for i in d2:
		if i in d1:
			d1[i]=d1[i]+d2[i]
		else:
			d1[i]=d2[i]
	return d1
	

def pge_dic(dic):
	d={}
	tot=0
	for x in dic:
		tot+=dic[x]
	for i in dic:
		if dic[i]>int(tot * 0.0001):
			d[i]=dic[i]
	return d

def pge_dic_mot(dic):
	d={}
	tot=0
	for x in dic:
		tot+=dic[x]
	for i in dic:
		lg=len(i)
		if lg < 7:
			if dic[i]>int(tot * 0.0001):
				d[i]=dic[i]
	return d


def scorefich(dico_text,dico_ress):
	sc=0
	for i in dico_ress:
		if i in dico_text:
			sc+=1
	return sc/float(len(dico_ress))
# ___________ TP3 _____________

from tooltp3 import *

# _____graph_____
import matplotlib
matplotlib.use('Agg')
from matplotlib.pyplot import figure
from matplotlib.table import table
from pylab import *

# ____recupere les trigram dans une chaine de caractere_______

def ressource():
	list_lang=['en','fr','es','nl','de','lt']
	for lang in list_lang:
		x=glob.glob("Corpus/CorpusEntr/%s/*.xml"%lang)
		tri={}
		mot={}
		suf={}
		for fichier in x:
			prep=prepare_file(fichier)
			tri=ajout_dic(tri, dic_eff_trigram(prep))
			mot=ajout_dic(mot, dic_eff_mot(prep))
			suf=ajout_dic(suf, dic_eff_trigram(prep))
		tri=pge_dic(tri)
		mot=pge_dic_mot(mot)
		suf=pge_dic(suf)
		try:
			os.mkdir("ressource")
		except:
			None
		try:
			os.mkdir("ressource/%s"%(lang))
		except:
			None
		write_file("ressource/%s/resstrigram.json"%(lang),json.dumps(tri))
		write_file("ressource/%s/ressmot.json"%(lang),json.dumps(mot))
		write_file("ressource/%s/resssuf.json"%(lang),json.dumps(suf))


def score():
	typ=['mot','trigram','suf']
	list_lang=['en','fr','es','nl','de','lt','lv','pt','it','li']
	list_lang_ress=['en','fr','es','nl','de','lt']
	tab=[]
	for t in typ:
		sou_tab=[]
		for lang in list_lang:
			x=glob.glob("Corpus/CorpusTest/%s/*.xml"%lang)
			for fichier in x:
				sou_sou_tab=[]
				for lg in list_lang_ress:
					l_res=glob.glob("ressource/%s/ress%s.json"%(lg , t))
					for z in l_res:
						res=prepare_file(z)
						res=json.loads(res)
						new=prepare_file(fichier)
						if t == 'trigram':
							new=dic_eff_trigram(new)
						elif t == 'suf':
							new=dic_eff_suffixe(new)
						else:
							new=dic_eff_mot(new)
					sc=scorefich(new,res)
					sou_sou_tab+=[lg,sc]
				sou_tab+=[fichier,lang,sou_sou_tab]
			tab+=sou_tab

		try:
			os.mkdir("score")
		except:
			None
		write_file("score/score%s.json"%t, json.dumps(tab,indent=4))
		print tab
	return
	


